openapi: 3.0.1
info:
  contact:
    email: lampralexandros@gmail.com
  description: This is a sample openApi document
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://wabli.netlify.app/
  title: TempApi
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- description: local-host
  url: http://127.0.0.1:8080/v1
security:
- {}
tags:
- description: not yet ready
  name: form
- description: not yet ready
  name: formB
paths:
  /form:
    post:
      operationId: createform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/form'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/form'
          description: successful operation
      summary: Creates the data
      tags:
      - form
      x-eov-operation-handler: controllers/FormController
  /form/{formId}:
    delete:
      operationId: deleteform
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: formId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - form
      x-eov-operation-handler: controllers/FormController
    get:
      operationId: getform
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: formId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/form'
          description: successful operation
      summary: Get the element
      tags:
      - form
      x-eov-operation-handler: controllers/FormController
    put:
      operationId: updateform
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: formId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/form'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/form'
          description: successful operation
      summary: Updates the element
      tags:
      - form
      x-eov-operation-handler: controllers/FormController
  /form/getAll:
    get:
      operationId: getAllform
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/form'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - form
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/FormController
  /formB:
    post:
      operationId: createformB
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/formB'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formB'
          description: successful operation
      summary: Creates the data
      tags:
      - formB
      x-eov-operation-handler: controllers/FormBController
  /formB/{formBId}:
    delete:
      operationId: deleteformB
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: formBId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - formB
      x-eov-operation-handler: controllers/FormBController
    get:
      operationId: getformB
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: formBId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formB'
          description: successful operation
      summary: Get the element
      tags:
      - formB
      x-eov-operation-handler: controllers/FormBController
    put:
      operationId: updateformB
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: formBId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/formB'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formB'
          description: successful operation
      summary: Updates the element
      tags:
      - formB
      x-eov-operation-handler: controllers/FormBController
  /formB/getAll:
    get:
      operationId: getAllformB
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/formB'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - formB
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/FormBController
components:
  schemas:
    form:
      example:
        formEmailB: formEmailB
        formEmail: formEmail
        formName: formName
        _id: _id
        formEmailO: formEmailO
      properties:
        _id:
          type: string
        formName:
          type: string
        formEmail:
          type: string
        formEmailB:
          type: string
        formEmailO:
          type: string
      required:
      - formEmail
      - formEmailB
      - formEmailO
      - formName
      type: object
    formB:
      example:
        formNameB: formNameB
        _id: _id
      properties:
        _id:
          type: string
        formNameB:
          type: string
      required:
      - formNameB
      type: object
